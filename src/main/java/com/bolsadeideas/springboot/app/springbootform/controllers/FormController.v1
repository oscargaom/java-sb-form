package com.bolsadeideas.springboot.app.springbootform.controllers;

import java.util.HashMap;
import java.util.Map;

import javax.validation.Valid;

import com.bolsadeideas.springboot.app.springbootform.models.domain.Usuario;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class FormController {
    /*
     * @RequestParam("password") String password. SpringBoot asigna directamente el
     * valor del input del formulario de nombre password en la variable password de
     * tipo String.
     */
    // @PostMapping("/form")
    // public String procesarForm(Model model, @RequestParam("username") String
    // username,
    // @RequestParam("password") String password, @RequestParam String email) {

    // Usuario usuario = new Usuario();

    // usuario.setEmail(email);
    // usuario.setPassword(password);
    // usuario.setUsername(username);

    // model.addAttribute("usuario", usuario);
    // model.addAttribute("titulo", "Parámetros recibidos del formulario");

    // return "resultado";
    // }

    /*
     * Usuario usuario. SpringBoot asigna directamente los valores del input del
     * formulario a cada uno de las variables de la clase (usuario, email y
     * password) de tipo String por medio de sus métodos setters.
     */

    @GetMapping("/form")
    public String form(Model model) {
        /*  Se agrega el objeto usuario al modelo porque la primera vez que se carga la paǵina 
            con el formulario este aún no existe y genera un error porque es nulo.
        */
        model.addAttribute("user", new Usuario());
        model.addAttribute("titulo", "Datos de entrada del formulario");
        return "form";
    }

    /*  La anotación @ModelAttribute nos sirve para nombrar el objeto que usaremos entre el controlador y la vista,
        en caso de no hacerlo tomara por default el nombre del parámetro que en este cas sería usuario y es el que también 
        deberíamos manejar en la vista o página html.
    */
    @PostMapping("/form")
    public String procesarForm(@Valid @ModelAttribute("user") Usuario usuario, BindingResult result, Model model) {
    //public String procesarForm(@Valid Usuario usuario, BindingResult result, Model model) {
        
        model.addAttribute("titulo", "Parámetros recibidos del formulario");

        if (result.hasErrors()) {
            Map<String, String> errores = new HashMap<>();

            result.getFieldErrors().forEach(err -> {
                errores.put(err.getField(), "El campo ".concat(err.getField()).concat(" ").concat(err.getDefaultMessage()));
            });
            
            /*  En caso de que ocurra un error Spring se encarga de agregar al modelo de manera automática el objeto user 
                por lo que ya no es necesario agregarlo. Esto es últil porque cuando regresemos de nueva cuenta a la página
                del formulario ya tenemos el objeto original así como con los valores que fueron introducidos en el formulario
                y ya no tenemos que cargarlos o escribirlos nuevamente.
            */
            model.addAttribute("error", errores);
            return "form";
        }

        model.addAttribute("usuario", usuario);

        return "resultado";
    }
}
